{"version":3,"sources":["./src/environments/environment.ts","./src/api/swapi.service.ts","./src/app/app.component.ts","./src/app/star-wars/star-wars.component.html","./src/app/app.component.html","./src/app/app.module.ts","./src/$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.scss","./src/app/star-wars/star-wars.component.scss","./src/main.ts","./src/app/star-wars/star-wars.component.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nconst baseUrl = 'https://swapi.dev/api';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SwapiService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getShips(): Promise<any> {\r\n    return this.http.get(`${baseUrl}/starships`).toPromise();\r\n  }\r\n\r\n  getPilots(): Promise<any> {\r\n    return this.http.get(`${baseUrl}/people`).toPromise();\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'StarWarsApi';\n}\n","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div>\\n      <div class=\\\"col-4\\\">test</div>\\n      <div class=\\\"col-4\\\">test</div>\\n      <div class=\\\"col-4\\\">test</div>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<router-outlet></router-outlet>\\n\";","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { StarWarsComponent } from './star-wars/star-wars.component';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [AppComponent, StarWarsComponent],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","import { RouterModule, Routes } from '@angular/router';\nimport { NgModule } from '@angular/core';\nimport { StarWarsComponent } from './star-wars/star-wars.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: 'StarWarsComponent', pathMatch: 'full' },\n  { path: 'starwars', component: StarWarsComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJhcHAuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzdGFyLXdhcnMuY29tcG9uZW50LnNjc3MifQ== */\";","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","import { Component, OnInit } from '@angular/core';\nimport { SwapiService } from 'src/api/swapi.service';\n\n@Component({\n  selector: 'app-star-wars',\n  templateUrl: './star-wars.component.html',\n  styleUrls: ['./star-wars.component.scss'],\n})\nexport class StarWarsComponent implements OnInit {\n  starShips: Array<any> = [];\n  constructor(private readonly swapiService: SwapiService) {}\n\n  ngOnInit() {\n    this.swapiService.getShips().then((ships) => {\n      console.log(ships);\n      // tslint:disable-next-line:whitespace\n      if (ships.pilots?.length > 0) {\n        this.swapiService.getPilots().then((results) => {});\n      }\n    });\n\n    this.swapiService.getPilots().then((response) => {\n      this.starShips = response.results;\n      console.log(this.starShips);\n    });\n  }\n}\n"],"sourceRoot":"webpack:///"}